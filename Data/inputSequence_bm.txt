<soc> public void testSharedLocks2 ( ) throws SQLException { Statement s = createStatement ( ) ; ResultSet rs = s
<soc> public void initialize ( final IPath containerName , IJavaProject project ) throws CoreException { IPath ws = ResourcesPlugin .
<soc> public static int [ ] primes ( int number ) { List < Integer > factors = new ArrayList
<soc> private static void shuffleArray ( int [ ] array ) { int index , temp ; Random random =
<soc> public static double binarySearch ( double [ ] a , double key ) { if ( a . length
<soc> private static Font getFont ( String name ) { Font font = null ; if ( name == null
<soc> public static void createRSAKeys ( ) throws Exception { KeyPairGenerator kpg = KeyPairGenerator . getInstance ( <str_val> ) ;
<soc> void playSound ( String soundFile ) { File f = new File ( <str_val> + soundFile ) ; AudioInputStream
<soc> public void captureScreen ( String fileName ) throws Exception { Dimension screenSize = Toolkit . getDefaultToolkit ( ) .
<soc> public static String savePage ( final String URL ) throws IOException { String line = <str_val> , all =
<soc> static int fibonacci ( int value , boolean printThis ) { int result ; if ( value == <num_val>
<soc> private void sendMessage ( String body , String toJid ) { try { Jid jid = JidCreate . from
<soc> public static void encryptFile ( String algorithm , SecretKey key , IvParameterSpec iv , File inputFile , File outputFile
<soc> private static Object resizeArray ( Object oldArray , int newSize ) { int oldSize = java . lang .
<soc> public static void main ( String [ ] args ) { String url = <str_val> ; if ( Desktop
<soc> private void launchFile ( File file ) { if ( ! Desktop . isDesktopSupported ( ) ) return ;
<soc> static int gcd ( int a , int b ) { while ( b != <num_val> ) { int
<soc> public void testGetMethod ( ) throws SecurityException , NoSuchMethodException , IllegalArgumentException , IllegalAccessException , InvocationTargetException { Method m =
<soc> public static void parseXml2 ( String URL ) { DOMParser parser = new DOMParser ( ) ; try {
<soc> public static Date getDateFromString ( String format , String dateStr ) { DateFormat formatter = new SimpleDateFormat ( format
<soc> public String MD5 ( String md5 ) { try { java . security . MessageDigest md = java .
<soc> public static void compress ( String dirPath ) { final Path sourceDir = Paths . get ( dirPath )
<soc> private File [ ] selectDir ( ) { JFileChooser fileChooser = new JFileChooser ( lastDir ) ; fileChooser .
<soc> public static void Send ( final String username , final String password , String recipientEmail , String ccEmail ,
<soc> public static long getChecksumCRC32 ( InputStream stream , int bufferSize ) throws IOException { CheckedInputStream checkedInputStream = new CheckedInputStream
<soc> public static void main ( String [ ] args ) throws Exception { ProcessBuilder builder = new ProcessBuilder (
<soc> public static void main ( String args [ ] ) { try { InnerClass inner = ( InnerClass )
<soc> public void initSQLServer ( ) { try { Class . forName ( DRIVER ) . newInstance ( ) ;
<soc> public static byte [ ] getBytesFromInputStream ( InputStream is ) throws IOException { ByteArrayOutputStream os = new ByteArrayOutputStream (
<soc> private static String getMacAddress ( InetAddress ip ) { String address = null ; try { NetworkInterface network =
<soc> void deleteDir ( File file ) { File [ ] contents = file . listFiles ( ) ; if
<soc> public static void copyFile ( File sourceFile , File destFile ) throws IOException { if ( ! destFile .
<soc> public void parseFile ( final InputStream inStream ) { final BufferedReader reader = new BufferedReader ( new InputStreamReader (
<soc> public static int [ ] [ ] transposeMatrix ( int [ ] [ ] matrix ) { int m
<soc> public static void main ( String [ ] args ) { Matcher m = p . matcher ( <str_val>
<soc> public void move ( File file , File targetFile ) { if ( file . isDirectory ( ) &&
<soc> public static boolean istPalindrom ( char [ ] word ) { int i1 = <num_val> ; int i2 =
<soc> public static void main ( String args [ ] ) throws IOException { PDDocument pdfdoc = new PDDocument (
<soc> public static void unzip ( InputStream inputStream , File targetDirectory ) throws IOException , IllegalAccessException { try ( ZipArchiveInputStream
<soc> void open ( ) throws IOException { ftp = new FTPClient ( ) ; ftp . addProtocolCommandListener ( new
<soc> private static int [ ] bublesort ( int [ ] list , int length ) { boolean swap =
<soc> public void createPartControl ( Composite parent ) { graphicalViewer = new ScrollingGraphicalViewer ( ) ; canvas = ( FigureCanvas
<soc> @ Override protected void createGraphicalViewer ( final Composite parent ) { _rulerComposite = new RulerComposite ( parent , SWT